version: 0.1.0
name: config_sample
description: Sample config DSL for v0.1.0

inputs:
  - service_name: service1
  - $cntr_name: service_container
  - $HOST_HTTP_PORT: 8080
  - $ENV_LOG_SETTING: "NIM_LOG=debug"

services:
  service_simple:
    image: nginx:latest
    # if no '--name' in args, the container name will be the service name:w
    args:
      - --ulimit nofile=1024:1024
      - --device all
      - --privileged
      - -m 512m
    ports:
      - 80:80
    envs:
      - DEBUG_LOG=debug
    vols:
      - ~/data:/data
  $service_name:      # reserved kw instance w/ lazy-var
    # serivce dependency kw: service_A depends_on service_B; service_A, service_B must be valid
    depends_on:
      - service2
    image: nginx:latest
    args:
      - --name ${$service_name}
    ports:
      - ${$HOST_HTTP_PORT}:80   # value w/ lazy-var
    envs:
      - ENV=test
      - ${$ENV_LOG_SETTING}     # env var pair w/ lazy-var
    vols:
      - ~/data:/data
  service2:
    trigger: [ test_http, test_grpc ]   # service trigger kw: service_A trigger test1, test2; test1, test2 must be valid
    image: nginx:latest
    args:
      - --name ${$cntr_name}
    envs: []
    vols: []
    ports:
      - 80:80
test_container:
  # container include test_cases, it can be triggered by test_cases
  depends_on: [ service_simple ]
  image: test_image:latest
  args: []
  ports:
    - 80:80
  envs:
    - ENV=test
    - ${$ENV_LOG_SETTING}     # env var pair w/ lazy-var
  vols: []

tests:
  test_shell:
    description: "test in shell cmd"
    runner:
      mode: shell
      cmd: [ "echo", "'Hello, World!'" ]
    expect:
      exit_code: 0
      stdout: "Hello, World!"
      stderr: ""
  test_http:
    description: "test via http client"
    runner:
      mode: http
      header: ""
      method: "POST"
      payload: "{\"greeting\": \"Hello, World!\"}"
      endpoint: "http://localhost:8080"
    expect:
      status_code: 201
      response: "{\"data\": \"Hello, World!\"}"
  test_pytest:
    # test running w/ pytest cli, e.g. pytest --rootdir=<root_dir> <args>.
    # <root_dir> is the root directory of the project, <args> is the arguments for pytest.
    description: "test run by pytest cli"
    runner:
      mode: pytest
      root_dir: ./octopus/tests
      args: []
    expect:
      # pytest exit_code: https://docs.pytest.org/en/stable/reference/reference.html#pytest.ExitCode
      exit_code: 0
  test_docker:
    # assume test case is running in docker container, e..g docker exec <container_id> <cmd>
    needs: [ test_container ]   # needs kw: test_docker will check service test_container is running
    description: "test run in docker container"
    runner:
      mode: docker
      cmd: ["echo", "Hello, World!"]
    expect:
      exit_code: 0
      stdout: "Hello, World!"
      stderr: ""
  test_grpc:
    # grpcurl -d '{"name": "World"}' -plaintext localhost:50051 hello.Greeter/SayHello
    description: "test run by grpc client"
    runner:
      mode: grpc
      function: "hello.Greeter/SayHello"
      endpoint: "localhost:50051"
      payload: '{"name": "World"}'
    expect:
      exit_code: 201
      response: "Hello, World!"
